/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bus } from "./Bus";
import { BusCountArgs } from "./BusCountArgs";
import { BusFindManyArgs } from "./BusFindManyArgs";
import { BusFindUniqueArgs } from "./BusFindUniqueArgs";
import { CreateBusArgs } from "./CreateBusArgs";
import { UpdateBusArgs } from "./UpdateBusArgs";
import { DeleteBusArgs } from "./DeleteBusArgs";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { BusService } from "../bus.service";
@graphql.Resolver(() => Bus)
export class BusResolverBase {
  constructor(protected readonly service: BusService) {}

  async _busesMeta(
    @graphql.Args() args: BusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bus])
  async buses(@graphql.Args() args: BusFindManyArgs): Promise<Bus[]> {
    return this.service.buses(args);
  }

  @graphql.Query(() => Bus, { nullable: true })
  async bus(@graphql.Args() args: BusFindUniqueArgs): Promise<Bus | null> {
    const result = await this.service.bus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bus)
  async createBus(@graphql.Args() args: CreateBusArgs): Promise<Bus> {
    return await this.service.createBus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bus)
  async updateBus(@graphql.Args() args: UpdateBusArgs): Promise<Bus | null> {
    try {
      return await this.service.updateBus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bus)
  async deleteBus(@graphql.Args() args: DeleteBusArgs): Promise<Bus | null> {
    try {
      return await this.service.deleteBus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Reservation], { name: "reservations" })
  async findReservations(
    @graphql.Parent() parent: Bus,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
