/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bus as PrismaBus,
  Reservation as PrismaReservation,
} from "@prisma/client";

export class BusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BusCountArgs, "select">): Promise<number> {
    return this.prisma.bus.count(args);
  }

  async buses<T extends Prisma.BusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusFindManyArgs>
  ): Promise<PrismaBus[]> {
    return this.prisma.bus.findMany<Prisma.BusFindManyArgs>(args);
  }
  async bus<T extends Prisma.BusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusFindUniqueArgs>
  ): Promise<PrismaBus | null> {
    return this.prisma.bus.findUnique(args);
  }
  async createBus<T extends Prisma.BusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusCreateArgs>
  ): Promise<PrismaBus> {
    return this.prisma.bus.create<T>(args);
  }
  async updateBus<T extends Prisma.BusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusUpdateArgs>
  ): Promise<PrismaBus> {
    return this.prisma.bus.update<T>(args);
  }
  async deleteBus<T extends Prisma.BusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusDeleteArgs>
  ): Promise<PrismaBus> {
    return this.prisma.bus.delete(args);
  }

  async findReservations(
    parentId: string,
    args: Prisma.ReservationFindManyArgs
  ): Promise<PrismaReservation[]> {
    return this.prisma.bus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reservations(args);
  }
}
