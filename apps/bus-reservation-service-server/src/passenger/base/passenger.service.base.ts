/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Passenger as PrismaPassenger,
  Reservation as PrismaReservation,
} from "@prisma/client";

export class PassengerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PassengerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passenger.count(args);
  }

  async passengers<T extends Prisma.PassengerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PassengerFindManyArgs>
  ): Promise<PrismaPassenger[]> {
    return this.prisma.passenger.findMany<Prisma.PassengerFindManyArgs>(args);
  }
  async passenger<T extends Prisma.PassengerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PassengerFindUniqueArgs>
  ): Promise<PrismaPassenger | null> {
    return this.prisma.passenger.findUnique(args);
  }
  async createPassenger<T extends Prisma.PassengerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PassengerCreateArgs>
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.create<T>(args);
  }
  async updatePassenger<T extends Prisma.PassengerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PassengerUpdateArgs>
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.update<T>(args);
  }
  async deletePassenger<T extends Prisma.PassengerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PassengerDeleteArgs>
  ): Promise<PrismaPassenger> {
    return this.prisma.passenger.delete(args);
  }

  async findReservations(
    parentId: string,
    args: Prisma.ReservationFindManyArgs
  ): Promise<PrismaReservation[]> {
    return this.prisma.passenger
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reservations(args);
  }
}
